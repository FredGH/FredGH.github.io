import scala.io.Source

class AccountInfo {
  private var balance =0.0 
  def deposit(amount: Double) {
    balance += amount 
  }
  def withdraw(amount: Double) {
    if (amount > balance) println("Current Balance:" + balance + " amount to debit:" + amount + ". Not enough funds -> amount not debited.")
      else 
      {
        balance -= amount
        println("Remaining balance: " + balance)
      }
  }
}

object Conversions {
  private val balance =0.0 
   def inchestoFeet(inches: Double): Double =   {
    var feet =  inches / 12
    return feet
  }
  def milestoKms(miles: Double):  Double =   {
    
    var kms = miles / 1.6
    return kms
  }
  
  def poundsToKilos(pounds: Double): Double =   {
    
    var kilos = pounds * 0.45
    return kilos
  }
}

class BankAccount (initBal:Double){
  protected var balance = initBal
  
  def deposit(amount:Double) ={balance +=amount; balance}
  
  def withdraw(amount:Double) ={balance -=amount; balance}
  
  def getBalance() {println("Current balance: " + balance)}
}

class CheckingAccount(initBal:Double, thecharge:Double) extends BankAccount (initBal:Double){
  private var charge = thecharge
  
  override def deposit(amount:Double) ={
   println("Amount to deposit: " + amount + " minus charge: " + thecharge)
    super.deposit(amount-charge) }
  
  override def withdraw(amount:Double) ={
    println("Amount to withdraw: " + amount + " minus charge: " + thecharge)
    super.withdraw(amount+charge) }
  
  }

object Assignment_Main extends App {
  
  val filename1 = "/home/edureka/data1"
  
  println("Ex1: Write a class AccountInfo with methods deposit and withdraw, and a read-only property balance")
  val acctInfo = new AccountInfo
  acctInfo.deposit(100)
  acctInfo.withdraw(50)
  acctInfo.withdraw(50)
  acctInfo.withdraw(50)
  
  println("Ex2: Write an object Conversions with methods inchestoFeet, milestoKms and poundsToKilos and invoke it’s methods from a class of your choice")
  val intialValue = 10
  var convertedValue =  Conversions.inchestoFeet(intialValue)
  println(intialValue + " inches converts to " +  convertedValue + " feet")
  convertedValue =  Conversions.milestoKms(intialValue)
  println(intialValue + " miles converts to " +  convertedValue + " kms")
  convertedValue =  Conversions.poundsToKilos(intialValue)
  println(intialValue + " pounds converts to " +  convertedValue + " kilos")
  
  println("Ex3: Extend the following BankAccount class to a CheckingAccount class that charges $1 for every deposit and withdrawal")
  val checkingAccount = new CheckingAccount(200,1)
  checkingAccount.deposit(100)
  checkingAccount.getBalance
  checkingAccount.withdraw(50)
  checkingAccount.getBalance
  
  println("Ex4: Write a Scala program to get the largest element of an array using reduceLeft")
  //TODO
  val a = Array(12, 6, 15, 2, 20, 9)
  println("argest element: " + a.reduceLeft((x, y) => Math.max(x,y)))
  
  println("Ex5:Implement the factorial function using to and reduceLeft, without a loop or recursion")
  val factorial = (n: Int) => if (n < 1) 1 else (n to 1 by -1).reduceLeft(_ * _)
  println("factorial 0:" + factorial(0))
  println("factorial 3:" +factorial(3))
  
  
  println("Ex7:Write a Scala code which reverses the lines of a file (makes the first line as the last one, and so on)")
  println("original lines: " + Source.fromFile(filename1).getLines)
  println("reversed lines: " + Source.fromFile(filename1).getLines.toList.reverse)
  
  println("Ex8:Write a Scala code which reads a file and prints all words with more than 10 characters")
  println(Source.fromFile(filename1).getLines.flatMap("""([A-Za-z])+""".r.findAllIn).toList.find(x=>x.length() > 10))
  
}
